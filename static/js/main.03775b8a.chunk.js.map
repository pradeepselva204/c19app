{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid19.png"],"names":["module","exports","Cards","data","confirmed","lastUpdate","recovered","deaths","className","styles","container","Grid","justify","spacing","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","console","log","barChart","backgroundColor","options","legend","display","title","text","radarChart","doughNut","CountryPicker","handleCountryChange","fetchedCountries","setFetchCountries","FormControl","formControl","FormLabel","NativeSelect","defaultValue","onChange","e","target","index","key","App","state","fetchedData","setState","this","image","src","c19Image","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03775b8a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2s9ni\",\"card\":\"Cards_card__kUs_5\",\"infected\":\"Cards_infected__2IWey\",\"recovered\":\"Cards_recovered__nb70B\",\"deaths\":\"Cards_deaths__2S3fQ\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards=({ data: { confirmed, lastUpdate, recovered, deaths } })=>{\r\n\r\n    \r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container justify=\"center\" spacing={3}>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={confirmed.value} duration={3.5} separator=\",\">\r\n\r\n                            </CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={recovered.value} duration={1.5} separator=\",\">\r\n\r\n                            </CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    </CardContent>\r\n                </Grid>                \r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\">\r\n\r\n                            </CountUp>\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    </CardContent>\r\n                </Grid>                                \r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\nconst url=\"https://covid19.mathdro.id/api\"\r\n\r\n\r\nexport const fetchData=async (country) => {\r\n    let changeableUrl=url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n    try{\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        \r\n        return {\r\n            confirmed, \r\n            recovered, \r\n            deaths,\r\n            lastUpdate,\r\n        };\r\n    }catch (error){\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDailyData=async()=>{\r\n    try {\r\n        const {data}=await axios.get(`${url}/daily`);  \r\n        \r\n        const modifiedData= data.map((dailyData)=>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\nexport const fetchCountries=async () => {\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name);\r\n    }catch(error){\r\n\r\n    }\r\n}","import React,{ useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport  {Line, Bar, Polar, Radar,Bubble } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css'\r\n\r\nconst Chart=({data,country})=>{\r\n    const [dailyData,setDailyData] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI=async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }        \r\n        fetchAPI();\r\n    },[]);\r\n    const lineChart=(\r\n        dailyData.length ? (<Line\r\n        data={\r\n            {\r\n                labels:dailyData.map(({date})=>date),\r\n                datasets:[{\r\n                    data: dailyData.map(({confirmed})=>confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                },{\r\n                    data: dailyData.map(({deaths})=>deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: '#564356',\r\n                    fill: true,                    \r\n                }]\r\n            }\r\n        }/>) : null\r\n    );\r\n    console.log(data)\r\n    const barChart = (\r\n        data.confirmed ? (           \r\n            <Bar data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [\r\n                    { \r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(240, 149, 12, 0.911)',\r\n                            'rgba(21, 202, 172, 0.733)',\r\n                            'rgba(202, 21, 36, 0.733)'\r\n                        ],\r\n                        data: [data.confirmed.value, data.recovered.value,data.deaths.value]\r\n                     }\r\n                ]\r\n            }}\r\n                options={{ \r\n                    legend: {display:false},\r\n                    title: { display: true,text:`Current Status in ${country}` },\r\n                 }}\r\n            \r\n            />\r\n            \r\n        ):null\r\n    );\r\n    const radarChart = (\r\n        data.confirmed ? (           \r\n            <Radar data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [\r\n                    { \r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(240, 149, 12, 0.911)',\r\n                            'rgba(21, 202, 172, 0.733)',\r\n                            'rgba(202, 21, 36, 0.733)'\r\n                        ],\r\n                        data: [data.confirmed.value, data.recovered.value,data.deaths.value]\r\n                     }\r\n                ]\r\n            }}\r\n                options={{ \r\n                    legend: {display:false},\r\n                    title: { display: true,text:`Current Status in ${country}` },\r\n                 }}\r\n            \r\n            />\r\n            \r\n        ):null\r\n    );    \r\n    const bubbleChart = (\r\n        data.confirmed ? (           \r\n            <Bubble data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [\r\n                    { \r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(240, 149, 12, 0.911)',\r\n                            'rgba(21, 202, 172, 0.733)',\r\n                            'rgba(202, 21, 36, 0.733)'\r\n                        ],\r\n                        data: [data.confirmed.value, data.recovered.value,data.deaths.value]\r\n                     }\r\n                ]\r\n            }}\r\n                options={{ \r\n                    legend: {display:false},\r\n                    title: { display: true,text:`Current Status in ${country}` },\r\n                 }}\r\n            \r\n            />\r\n            \r\n        ):null\r\n    );    \r\n    const doughNut=(\r\n        data.confirmed? (\r\n            <Polar data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [\r\n                    { \r\n                        label: 'People',\r\n                        backgroundColor: [\r\n                            'rgba(240, 149, 12, 0.911)',\r\n                            'rgba(21, 202, 172, 0.733)',\r\n                            'rgba(202, 21, 36, 0.733)'\r\n                        ],\r\n                        data: [data.confirmed.value, data.recovered.value,data.deaths.value]\r\n                     }\r\n                ]                \r\n            }}\r\n\r\n            />\r\n        ):null\r\n    )\r\n    return(\r\n    <div className={styles.container}>\r\n        { country ?  barChart : lineChart}\r\n        { country ?  doughNut : null}\r\n        { country ?  radarChart : null}        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl, FormLabel} from '@material-ui/core';\r\nimport {fetchCountries} from '../../api';\r\nimport styles from './CountryPicker.module.css';\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const [fetchedCountries,setFetchCountries] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI=async () => {\r\n            setFetchCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchCountries]);\r\n    \r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n            <FormLabel><bold>Select the Country</bold></FormLabel>\r\n            <NativeSelect defaultValue='' onChange={(e)=>{handleCountryChange(e.target.value)}}>\r\n                <option value=\"\">\r\n                    Global\r\n                </option>\r\n                {fetchedCountries.map((country, index)=>\r\n                <option key={index} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\n\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css'\r\nimport {fetchData} from './api';\r\nimport c19Image from './images/covid19.png'\r\nclass App extends React.Component{\r\n    state={\r\n        data:{},\r\n        country:''\r\n        \r\n    }\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n        this.setState({ data : fetchedData });\r\n        \r\n        \r\n    }\r\n\r\n    handleCountryChange=async(country)=>{\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({ data : fetchedData, country: country });\r\n    }\r\n\r\n    render() {\r\n        const { data, country } = this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={c19Image} alt=\"Covid 19 App Header Image\"/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange} ></CountryPicker>\r\n                <Cards data={data}></Cards>                                \r\n                <Chart data={data} country={country}></Chart>\r\n                <p>Dashboard design: Pradeep Selvaraj</p>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App/>,document.getElementById('root')\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3O0Af\",\"image\":\"App_image__1zQQY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__39584\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1crQ9\"};","module.exports = __webpack_public_path__ + \"static/media/covid19.8d35201b.png\";"],"sourceRoot":""}